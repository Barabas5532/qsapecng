Fast fix to build QSapecNG v2.0.0 also with Qwt libraries version 6.
--- a/cmake/Modules/FindQwt5.cmake
+++ b/cmake/Modules/FindQwt5.cmake
@@ -36,10 +36,11 @@
   # Find Qwt version
   IF( Qwt5_INCLUDE_DIR )
     FILE( READ "${Qwt5_INCLUDE_DIR}/qwt_global.h" QWT_GLOBAL_H )
-    STRING( REGEX MATCH "#define *QWT_VERSION *(0x05*)" QWT_IS_VERSION_5 ${QWT_GLOBAL_H})
-    
-    IF( QWT_IS_VERSION_5 )
-    STRING(REGEX REPLACE ".*#define[\\t\\ ]+QWT_VERSION_STR[\\t\\ ]+\"([0-9]+\\.[0-9]+\\.[0-9]+)\".*" "\\1" Qwt_VERSION "${QWT_GLOBAL_H}")
+    STRING(REGEX REPLACE ".*#define[\\t\\ ]+QWT_VERSION_STR[\\t\\ ]+\"([0-9]+\\.[0-9]+\\.[0-9]+).*\".*" "\\1" Qwt_VERSION "${QWT_GLOBAL_H}")
+    STRING( REGEX MATCH "#define *QWT_VERSION *(0x05[0-9]*)" QWT_IS_VERSION_5 ${QWT_GLOBAL_H})
+    STRING( REGEX MATCH "#define *QWT_VERSION *(0x06[0-9]*)" QWT_IS_VERSION_6 ${QWT_GLOBAL_H})
+
+    IF( QWT_IS_VERSION_5 OR QWT_IS_VERSION_6)
 
     # Find Qwt5 library linked to Qt4
     FIND_LIBRARY( Qwt5_Qt4_TENTATIVE_LIBRARY
@@ -60,7 +61,7 @@
           SET( Qwt5_Qt4_LIBRARY ${Qwt5_Qt4_TENTATIVE_LIBRARY} )
           SET( Qwt5_Qt4_FOUND TRUE )
           IF (NOT Qwt5_FIND_QUIETLY)
-            MESSAGE( STATUS "Found Qwt: ${Qwt5_Qt4_LIBRARY}" )
+            MESSAGE( STATUS "Found Qwt: ${Qwt5_Qt4_LIBRARY} (version ${Qwt_VERSION})" )
           ENDIF (NOT Qwt5_FIND_QUIETLY)
         ENDIF( Qwt5_IS_LINKED_TO_Qt4 )
       ENDIF( Qwt5_Qt4_TENTATIVE_LIBRARY )
@@ -101,13 +102,17 @@
     # ENDIF (NOT Qwt5_FIND_QUIETLY)
     #ENDIF( UNIX AND NOT CYGWIN)
     
-    ENDIF( QWT_IS_VERSION_5 )
+    ENDIF( QWT_IS_VERSION_5 OR QWT_IS_VERSION_6)
     
     IF( Qwt5_Qt4_FOUND OR Qwt5_Qt3_FOUND )
       SET( Qwt5_FOUND TRUE )
     ENDIF( Qwt5_Qt4_FOUND OR Qwt5_Qt3_FOUND )
+
+    IF( QWT_IS_VERSION_6 )
+      SET( Qwt6_FAST_FIX_FOR_DEBIAN "#define Qwt6_FAST_FIX_FOR_DEBIAN 1\n#include <qwt_interval.h>\n#include <qwt_point_3d.h>\n#include <qwt_compat.h>\n")
+    ENDIF( QWT_IS_VERSION_6 )
     
-    MARK_AS_ADVANCED( Qwt5_INCLUDE_DIR Qwt5_Qt4_LIBRARY Qwt5_Qt3_LIBRARY )
+    MARK_AS_ADVANCED( Qwt5_INCLUDE_DIR Qwt5_Qt4_LIBRARY Qwt5_Qt3_LIBRARY Qwt6_FAST_FIX_FOR_DEBIAN )
   ENDIF( Qwt5_INCLUDE_DIR )
 
     IF (NOT Qwt5_FOUND AND Qwt5_FIND_REQUIRED)
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,6 +2,7 @@
 find_package( Qt4 COMPONENTS QtCore QtGui REQUIRED )
 find_package( Qwt5 REQUIRED )
 
+file(WRITE "libqwt6_fix.h" "${Qwt6_FAST_FIX_FOR_DEBIAN}")
 
 if(WIN32)
   set( QT_USE_QTMAIN 1 )
--- a/src/gui/workplane/workplane.h
+++ b/src/gui/workplane/workplane.h
@@ -31,6 +31,7 @@
 #include <QtCore/QVector>
 #include <QtCore/QPair>
 
+#include "libqwt6_fix.h"
 #include <qwt_plot.h>
 #include <qwt_plot_curve.h>
 
@@ -163,6 +164,9 @@
   inline QMenu* contextMenu() const { return plot_->contextMenu(); }
 
   const QwtPlot& const_plot() const { return *plot_; }
+#ifdef Qwt6_FAST_FIX_FOR_DEBIAN
+  QwtPlot* plot() { return plot_; }
+#endif
 
 public slots:
   void setDirty();
--- a/src/gui/qsapecngwindow.cpp
+++ b/src/gui/qsapecngwindow.cpp
@@ -83,6 +83,11 @@
 #include <QtGui/QVBoxLayout>
 #include <QtGui/QApplication>
 
+#include "libqwt6_fix.h"
+#ifdef Qwt6_FAST_FIX_FOR_DEBIAN
+#include <qwt_plot_renderer.h>
+#endif
+
 #include <limits>
 
 
@@ -442,7 +447,12 @@
     if(QPrintDialog(&printer).exec() != QDialog::Accepted)
       return;
 
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
     workplane_->const_plot().print(printer);
+#else
+    QwtPlotRenderer renderer;
+    renderer.renderTo(workplane_->plot(),printer);
+#endif
   }
 }
 
--- a/src/gui/workplane/workplane.cpp
+++ b/src/gui/workplane/workplane.cpp
@@ -37,6 +37,8 @@
 #include <QtGui/QHeaderView>
 #include <QtGui/QFrame>
 
+#include "libqwt6_fix.h"
+
 #include <qwt_plot_grid.h>
 #include <qwt_plot_canvas.h>
 #include <qwt_plot_picker.h>
@@ -88,6 +90,7 @@
 {
   if(isVisible()) {
     std::size_t idx;
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
     for(idx = 0; idx < (data().size() - 1) && data().x(idx + 1) < pos.x(); ++idx);
     marker_->setValue(data().x(idx), data().y(idx));
 
@@ -106,6 +109,27 @@
       ? Qt::AlignBottom
       : Qt::AlignTop
       ;
+#else
+    QwtSeriesData<QPointF>* dd = data();
+    for(idx = 0; idx < (dd->size() - 1) && dd->sample(idx + 1).x() < pos.x(); idx++);
+    marker_->setValue(dd->sample(idx).x(), dd->sample(idx).y());
+
+    QString label = "( " + QString::number(dd->sample(idx).x()) + ", "
+      + QString::number(dd->sample(idx).y()) + " ) ["
+      + QString::number(idx) + "]";
+    marker_->setLabel(label);
+
+    Qt::Alignment H =
+        (dd->sample(idx).x() >= minXValue() + ((maxXValue() - minXValue()) / 2))
+      ? Qt::AlignLeft
+      : Qt::AlignRight
+      ;
+    Qt::Alignment V =
+        (dd->sample(idx).y() >= minYValue() + ((maxYValue() - minYValue()) / 2))
+      ? Qt::AlignBottom
+      : Qt::AlignTop
+      ;
+#endif
     marker_->setLabelAlignment(H | V);
 
     marker_->itemChanged();
@@ -121,7 +145,11 @@
 
   marker_ = new QwtPlotMarker;
   marker_->setLineStyle(QwtPlotMarker::NoLine);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   marker_->setSymbol(symbol);
+#else
+  marker_->setSymbol(&symbol);
+#endif
   marker_->setVisible(false);
 }
 
@@ -152,6 +180,7 @@
 {
   resetMarker();
 
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   for(std::size_t i = 0; i < data().size(); ++i) {
     QwtPlotMarker* marker = new QwtPlotMarker;
     marker->setLineStyle(QwtPlotMarker::NoLine);
@@ -160,6 +189,17 @@
 
     QString label = "( " + QString::number(data().x(i)) + ", "
       + QString::number(data().y(i)) + " )";
+#else
+  QwtSeriesData<QPointF>* dd = data();
+  for(std::size_t i = 0; i < dd->size(); ++i) {
+    QwtPlotMarker* marker = new QwtPlotMarker;
+    marker->setLineStyle(QwtPlotMarker::NoLine);
+    marker->setLabelAlignment(Qt::AlignBottom);
+    marker->setValue(dd->sample(i).x(), dd->sample(i).y());
+
+    QString label = "( " + QString::number(dd->sample(i).x()) + ", "
+      + QString::number(dd->sample(i).y()) + " )";
+#endif
     marker->setLabel(label);
 
     markers_.push_back(marker);
@@ -617,7 +657,12 @@
   plot_->setAutoReplot(true);
 
   tracker_ = new QwtPlotPicker(plot_->canvas());
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
+  // I cannot find a valid replacement for Qwt6, but the VLineRubberBand can be
+  // used only with PointSelection, so I think that Qwt6 set that value
+  // automatically.
   tracker_->setSelectionFlags(QwtPicker::PointSelection);
+#endif
   tracker_->setRubberBand(QwtPicker::VLineRubberBand);
   tracker_->setTrackerMode(QwtPicker::AlwaysOff);
 
@@ -653,7 +698,11 @@
   curves_[MAGNITUDE].first = new MarkableCurve;
   curves_[MAGNITUDE].first->setPen(functor_traits<sapecng::magnitude>::pen);
   curves_[MAGNITUDE].first->setStyle(functor_traits<sapecng::magnitude>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[MAGNITUDE].first->setSymbol(symbol);
+#else
+  curves_[MAGNITUDE].first->setSymbol(&symbol);
+#endif
   curves_[MAGNITUDE].first->setCurveAttribute(
     functor_traits<sapecng::magnitude>::attribute);
   curves_[MAGNITUDE].second = false;
@@ -672,7 +721,11 @@
   curves_[MAGNITUDE_RAD].first = new MarkableCurve;
   curves_[MAGNITUDE_RAD].first->setPen(functor_traits<sapecng::magnitude>::pen);
   curves_[MAGNITUDE_RAD].first->setStyle(functor_traits<sapecng::magnitude>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[MAGNITUDE_RAD].first->setSymbol(symbol);
+#else
+  curves_[MAGNITUDE_RAD].first->setSymbol(&symbol);
+#endif
   curves_[MAGNITUDE_RAD].first->setCurveAttribute(
     functor_traits<sapecng::magnitude>::attribute);
   curves_[MAGNITUDE_RAD].second = false;
@@ -691,7 +744,11 @@
   curves_[PHASE].first = new MarkableCurve;
   curves_[PHASE].first->setPen(functor_traits<sapecng::phase>::pen);
   curves_[PHASE].first->setStyle(functor_traits<sapecng::phase>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[PHASE].first->setSymbol(symbol);
+#else
+  curves_[PHASE].first->setSymbol(&symbol);
+#endif
   curves_[PHASE].first->setCurveAttribute(
     functor_traits<sapecng::phase>::attribute);
   curves_[PHASE].second = false;
@@ -709,7 +766,11 @@
   curves_[PHASE_RAD].first = new MarkableCurve;
   curves_[PHASE_RAD].first->setPen(functor_traits<sapecng::phase>::pen);
   curves_[PHASE_RAD].first->setStyle(functor_traits<sapecng::phase>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[PHASE_RAD].first->setSymbol(symbol);
+#else
+  curves_[PHASE_RAD].first->setSymbol(&symbol);
+#endif
   curves_[PHASE_RAD].first->setCurveAttribute(
     functor_traits<sapecng::phase>::attribute);
   curves_[PHASE_RAD].second = false;
@@ -728,7 +789,11 @@
   curves_[GAIN].first = new MarkableCurve;
   curves_[GAIN].first->setPen(functor_traits<sapecng::gain>::pen);
   curves_[GAIN].first->setStyle(functor_traits<sapecng::gain>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[GAIN].first->setSymbol(symbol);
+#else
+  curves_[GAIN].first->setSymbol(&symbol);
+#endif
   curves_[GAIN].first->setCurveAttribute(
     functor_traits<sapecng::gain>::attribute);
   curves_[GAIN].second = false;
@@ -746,7 +811,11 @@
   curves_[GAIN_RAD].first = new MarkableCurve;
   curves_[GAIN_RAD].first->setPen(functor_traits<sapecng::gain>::pen);
   curves_[GAIN_RAD].first->setStyle(functor_traits<sapecng::gain>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[GAIN_RAD].first->setSymbol(symbol);
+#else
+  curves_[GAIN_RAD].first->setSymbol(&symbol);
+#endif
   curves_[GAIN_RAD].first->setCurveAttribute(
     functor_traits<sapecng::gain>::attribute);
   curves_[GAIN_RAD].second = false;
@@ -765,7 +834,11 @@
   curves_[LOSS].first = new MarkableCurve;
   curves_[LOSS].first->setPen(functor_traits<sapecng::loss>::pen);
   curves_[LOSS].first->setStyle(functor_traits<sapecng::loss>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[LOSS].first->setSymbol(symbol);
+#else
+  curves_[LOSS].first->setSymbol(&symbol);
+#endif
   curves_[LOSS].first->setCurveAttribute(
     functor_traits<sapecng::loss>::attribute);
   curves_[LOSS].second = false;
@@ -782,7 +855,11 @@
   curves_[LOSS_RAD].first = new MarkableCurve;
   curves_[LOSS_RAD].first->setPen(functor_traits<sapecng::loss>::pen);
   curves_[LOSS_RAD].first->setStyle(functor_traits<sapecng::loss>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[LOSS_RAD].first->setSymbol(symbol);
+#else
+  curves_[LOSS_RAD].first->setSymbol(&symbol);
+#endif
   curves_[LOSS_RAD].first->setCurveAttribute(
     functor_traits<sapecng::loss>::attribute);
   curves_[LOSS_RAD].second = false;
@@ -801,7 +878,11 @@
   curves_[ZEROS].first = new MarkedCurve;
   curves_[ZEROS].first->setPen(functor_traits<sapecng::zeros>::pen);
   curves_[ZEROS].first->setStyle(functor_traits<sapecng::zeros>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[ZEROS].first->setSymbol(symbol);
+#else
+  curves_[ZEROS].first->setSymbol(&symbol);
+#endif
   curves_[ZEROS].first->setCurveAttribute(
     functor_traits<sapecng::zeros>::attribute);
   curves_[ZEROS].second = false;
@@ -811,7 +892,11 @@
   curves_[POLES].first = new MarkedCurve;
   curves_[POLES].first->setPen(functor_traits<sapecng::poles>::pen);
   curves_[POLES].first->setStyle(functor_traits<sapecng::poles>::style);
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
   curves_[POLES].first->setSymbol(symbol);
+#else
+  curves_[POLES].first->setSymbol(&symbol);
+#endif
   curves_[POLES].first->setCurveAttribute(
     functor_traits<sapecng::poles>::attribute);
   curves_[POLES].second = false;
@@ -838,7 +923,11 @@
     double* y = new double [data.second.size()];
     std::copy(data.second.begin(), data.second.end(), y);
 
+#ifndef Qwt6_FAST_FIX_FOR_DEBIAN
     curves_[f].first->setData(x, y,
+#else
+    curves_[f].first->setSamples(x, y,
+#endif
         data.first.size() < data.second.size() ?
             data.first.size()
           : data.second.size()
